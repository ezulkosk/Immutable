/*
 * Type system for object initialization, as described in:
 * "Freedom Before Commitment" by Alexander J. Summers and 
 * Peter Muller. 
 * 
 * Implemented in conjunction with an immutable type system.
 * 
 * Course Project: ECE750, University of Waterloo, Spring 2013
 * Author: Ed Zulkoski
 */

package javacop.immutability;
flowfact ImmutabilityFlowFacts;

/*---------------------------------------*/
/* Define the initialization annotations */
/*---------------------------------------*/

declare free(Symbol s){
	require(s.hasAnnotation("javacop.annotations.Free"));
}

declare unclassified(Symbol s){
	require(s.hasAnnotation("javacop.annotations.Unclassified"));
}

// Default to Committed
declare committed(Symbol s){
	require(explicitlyCommitted(s) || (!free(s) && !unclassified(s)));
}

declare committed(JCTree t){
	require(t.holdsSymbol && committed(t.getSymbol));
}

declare explicitlyCommitted(JCTree t){
	require(t.holdsSymbol && explicitlyCommitted(t.getSymbol));
}

declare explicitlyCommitted(Symbol s){
	require(s.hasAnnotation("javacop.annotations.Committed"));
}

/*-----------------------------------*/
/* Define the mutability annotations */
/*-----------------------------------*/

declare mutable(Symbol s){
	require(s.hasAnnotation("javacop.annotations.Mutable"));
}

// Default to immutable
declare immutable(Symbol s){
	require(s.hasAnnotation("javacop.annotations.Immutable")
			|| !mutable(s));
}

declare immutable(JCTree t){
	require(t.holdsSymbol && immutable(t.getSymbol));
}

/*----------------*/
/* Subtype Checks */
/*----------------*/

//Ensures that:
// 1) A mutable cannot be assigned to an immutable, or vice-versa.
// 2) The initialization types conform (e.g. a free object cannot be stored in a committed object).
rule subtypeCheck(r <<: l){
	require(mutability_helper(l, r)):warning(r,
			"Cannot assign mutable to immutable or vice versa: " + l + " <- " + r);
	require(init_helper(l,r)):warning(r,
			"Incompatible init types: " + l + " <- " + r);
}


/*------------------*/
/* Mutability Rules */
/*------------------*/

declare mutability_helper(Symbol l, JCTree r){
	require(ImmutabilityFlowFacts ff; ff <- r#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#mutabilityCheck(ff#immType(l ), ff#immType(r )));
	}
}

// I don't think this is ever called. Might be able to remove.
declare mutability_helper(JCTree l, JCTree r){
	require(ImmutabilityFlowFacts ff; ff <- r#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#mutabilityCheck(ff#immType(l ), ff#immType(r )));
	}
}



rule no_mutables_in_immutable_constructor(r <<: l){
	where(r instanceof JCNewClass){
		require(ImmutabilityFlowFacts ff; ff <- r#getFlowFacts(ImmutabilityFlowFacts#class)){
			require(ff#constructorCheck(ff#immType(l ), ff#checkConstructorArgs(r ))):warning(r, 
					"Passing a mutable into an immutable object constructor.");
		}
	}	
}

/*----------------------*/
/* Initialization Rules */
/*----------------------*/

declare init_helper(Symbol l, JCTree r){
	require(ImmutabilityFlowFacts ff; ff <- r#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#initCheck(ff#initType(l ), ff#initType(r )));
	}
}

// I'm unsure if this is ever called. Might be able to remove.
declare init_helper(JCTree l, JCTree r){
	require(ImmutabilityFlowFacts ff; ff <- r#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#initCheck(ff#initType(l ), ff#initType(r )));
	}
}

/*
rule assign(JCAssign a){
	where(a.lhs.holdsSymbol && committed(a.lhs.getSymbol)){
		require(committed(a.rhs) /*definitelyAssignedVariable(a)): warning(a, "Left committed but right uncommitted.");
	}
}
*/

//don't think I need this
declare definitelyAssignedVariable(JCAssign a){
	require(ImmutabilityFlowFacts ff ; ff <- a#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#hasBeenInitialized(a.lhs));
	}
}

/*------------------*/
/* Assignment Check */
/*------------------*/

//slightly redundant code
//if lhs is committed and immutable, error
rule assignment(JCAssign a){
	require(ImmutabilityFlowFacts ff; ff <- a#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#assign_to_committed_immutable_check(ff#initType(a.lhs), ff#immType(a.lhs))):warning(a, "Assigning to committed immutable object.");
	}
}

/*-----------------------*/
/* Method Receiver Rules */
/*-----------------------*/

//Methods that mutate the receiver should not be called with committed immutable receivers.
//Mutators are tracked using the @Mutates annotation.
//This method checks if any fields are mutated directly (i.e. not by calling another method).
rule mutator_requires_mutates(JCMethodDecl md){
	require(ImmutabilityFlowFacts ff ; ff <- md#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#mutator_requires_mutates_check(md )):warning(md, "Field mutations occuring in method without @Mutates or @Free annotation.");
	}
}

//This ensures that non-mutators cannot call mutators.
rule can_only_call_mutator_from_mutator(JCMethodInvocation mi){
	require(ImmutabilityFlowFacts ff ; ff <- mi#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#mutator_calls_check(mi, env)):warning(mi, "Mutator called from a method without @Free or @Mutates.");
	}
}

//This ensures that committed immutable objects cannot use mutators. 
rule can_only_call_mutator_with_mutable(JCMethodInvocation mi){
	require(ImmutabilityFlowFacts ff ; ff <- mi#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#mutator_receiver_check(mi )):warning(mi, "Mutator called with a committed/unclassified immutable receiver.");
	}
}

rule receiver_init_check(JCMethodInvocation mi){
	require(ImmutabilityFlowFacts ff ; ff <- mi#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#receiver_init_check(mi)):warning(mi, "Init-type of receiver and method incompatible.");
	}
}



/*--------------*/
/* Conditionals */
/*--------------*/

//Ensures that two branches of a conditional have the same init and immutability types
//NOT ROBUST (mainly to get java.lang.Boolean.java working)
//I should be using branching flowfacts, but it would be overkill at this point.
rule check_conditionals(JCConditional c){
	require(ImmutabilityFlowFacts ff ; ff <- c#getFlowFacts(ImmutabilityFlowFacts#class)){
		require(ff#check_conditional(c)):warning(c, "Init-type or mutability type of conditional branches differ.");
	}
}


/*--------------------*/
/* Sanity Constraints */	
/*--------------------*/

//A node must satisfy "free xor committed xor unclassified"
declare singleInitAnnotation(Symbol s){
	require(!(free(s) && explicitlyCommitted(s)) 
			&& !(free(s) && unclassified(s))
			&& !(explicitlyCommitted(s) && unclassified(s)));
}

rule singleInitAnnotation(JCVariableDecl vd){
	where(vd.holdsSymbol){
		require(singleInitAnnotation(vd.getSymbol))
		:warning(vd,"VarDecl can have only one of: [@Free,@Classified,@Unclassified].");
	}
}

rule singleInitAnnotation(JCMethodDecl md){
	where(md.holdsSymbol){
		require(singleInitAnnotation(md.getSymbol))
		:warning(md,"MethodDecl can have only one of: [@Free,@Classified,@Unclassified].");
	}
}

//A node must satisfy "mutable xor immutable"
declare singleMutationAnnotation(Symbol s){
	require(mutable(s) ^ immutable(s));
}

rule singleMutationAnnotation(JCVariableDecl vd){
	where(vd.holdsSymbol){
		require(singleMutationAnnotation(vd.getSymbol)):warning(vd,"VarDecl can have only one of: [@Mutable,@Immutable].");
	}
}

rule singleMutationAnnotation(JCMethodDecl md){
	where(md.holdsSymbol){
		require(singleMutationAnnotation(md.getSymbol)):warning(md,"MethodDecl can have only one of: [@Mutable,@Immutable].");
	}
}

//A constructor should not have an initialization modifier
declare noInitAnnotation(Symbol s){
	require(!free(s) && !explicitlyCommitted(s) && !unclassified(s));
}

//I guess we change it to FreeM and UnclassifiedM for methods.
rule noInitAnnotation(JCMethodDecl md){
	where(md.holdsSymbol && md.getSymbol.isConstructor){
		require(noInitAnnotation(md.getSymbol)):warning(md, "Constructors should not have initialization annotations.");
	}
}

//A field should not have an initialization modifier
rule noInitAnnotation(JCVariableDecl vd){
	where(vd.holdsSymbol && !vd.getSymbol.isStatic && !vd.getSymbol.isLocal){
		require(noInitAnnotation(vd.getSymbol)):warning(vd, "Fields should not have initialization annotations.");
	}
}

/*-----------------*/
/* TODO Extensions */
/*-----------------*/

//currently don't allow static fields
rule noStaticFields(JCVariableDecl vd){
	require(!vd.sym.isStatic):warning(vd, "Static fields are currently not allowed.");
}

